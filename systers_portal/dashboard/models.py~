from django.db import models
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.contrib.auth.models import Permission 
from django_countries.fields import CountryField
from cms.models.pagemodel import Page
from cms.models.fields import PlaceholderField
from django.core.urlresolvers import reverse
from guardian.shortcuts import assign_perm

class SysterUser(models.Model):
    """Profile model to store additional information about a user"""
    user = models.OneToOneField(User)
    country = CountryField(blank=True, null=True)
    blog_url = models.URLField(max_length=255, blank=True)
    homepage_url = models.URLField(max_length=255, blank=True)
    profile_picture = models.ImageField(upload_to='photos/',
                                        default='photos/dummy.jpeg',
                                        blank=True,
                                        null=True)

    def __unicode__(self):
        firstname = self.user.first_name
        lastname = self.user.last_name
        if firstname and lastname:
            return "{0} {1}".format(self.user.first_name, self.user.last_name)
        else:
            return self.user.username


class Community(models.Model):
    """Model to represent a Syster Community"""
    name = models.CharField(max_length=255)
    email = models.EmailField(max_length=255, blank=True)
    mailing_list = models.EmailField(max_length=255, blank=True)
    resource_area = models.URLField(max_length=255, blank=True)
    members = models.ManyToManyField(SysterUser, blank=True, null=True,
                                     related_name='member_of_community')
    community_admin = models.ForeignKey(SysterUser, related_name='community')
    parent_community = models.ForeignKey('self', blank=True, null=True)
    website = models.URLField(max_length=30, blank=True)
    facebook = models.URLField(max_length=30, blank=True)
    googleplus = models.URLField(max_length=30, blank=True)
    twitter = models.URLField(max_length=30, blank=True)
    slug = models.SlugField(max_length=150, unique=True)
    __original_name = None	


    class Meta:
        permissions = (
            ('add_community_systeruser', 'Add community Systeruser'),
            ('change_community_systeruser', 'Change community Systeruser'),
            ('delete_community_systeruser', 'Delete community Systeruser'),
            ('add_community_news', 'Add community news'),
            ('change_community_news', 'Change community news'),
            ('delete_community_news', 'Delete community news'),
            ('add_community_resource', 'Add community resource'),
            ('change_community_resource', 'Change community resource'),
            ('delete_community_resource', 'Delete community resource'),
            ('add_community_page', 'Add community page'),
            ('change_community_page', 'Change community page'),
            ('delete_community_page', 'Delete community page'),
        )

    def __init__(self, *args, **kwargs):
        super(Community, self).__init__(*args, **kwargs)
        self.__original_name = self.name

   def save(self, *args, **kwargs):
        obj=Permission.objects.get(codename='add_text')    
	obj1=Permission.objects.get(codename='change_text')    
	obj2=Permission.objects.get(codename='delete_text')    
        for community in Community.objects.all():
	    for member in SysterUser.objects.filter(member_of_community=community):
		member.user.is_staff=True
		member.user.save()
		member.user.user_permissions.add(obj)
		member.user.user_permissions.add(obj1)
		member.user.user_permissions.add(obj2)
                assign_perm('change_community_page',member.user,community)
        super(Community, self).save(*args, **kwargs)
        self.__original_name = self.name

    @property
    def original_name(self):
        return self.__original_name
    def __unicode__(self):
        return self.name


    """class Meta:
        permissions = (
             ('change_community_page', 'change community page'),
        )
    def save(self, *args, **kwargs):
	obj=Permission.objects.get(codename='add_text')    
	obj1=Permission.objects.get(codename='change_text')    
	obj2=Permission.objects.get(codename='delete_text')    
        for community in Community.objects.all():
	    for member in SysterUser.objects.filter(member_of_community=community):
		member.user.is_staff=True
		member.user.save()
		member.user.user_permissions.add(obj)
		member.user.user_permissions.add(obj1)
		member.user.user_permissions.add(obj2)
                assign_perm('change_community_page',member.user,community)
        super(Community, self).save(*args, **kwargs)"""
       


class Tag(models.Model):
    """Model to represent the tags a resource can have"""
    name = models.CharField(max_length=255)

    def __unicode__(self):
        return self.name


class ResourceType(models.Model):
    """Model to represent the types a resource can have"""
    name = models.CharField(max_length=255)

    def __unicode__(self):
        return self.name


class News(models.Model):
    """Model to represent a News section on Community resource area"""
    title = models.CharField(max_length=255)
    community = models.ForeignKey(Community)
    author = models.ForeignKey(SysterUser)
    date_created = models.DateField(auto_now=False, auto_now_add=True)
    date_modified = models.DateField(auto_now=True, auto_now_add=False)
    is_public = models.BooleanField(default=True)
    tags = models.ManyToManyField(Tag, blank=True, null=True)
    content = models.TextField()
    slug = models.SlugField(max_length=150, unique=True)

    def __unicode__(self):
        return "{0} of {1} Community".format(self.title, self.community.name)


class CommunityPage(models.Model):
    """Model to represent community pages"""
    title = models.CharField(max_length=255)
    editable_content = PlaceholderField('editable_content')
    community = models.ForeignKey(Community)
    editor = models.ManyToManyField(SysterUser,related_name='editor_of_page')
    creator = models.ForeignKey(SysterUser, related_name='creator_of_page')
    slug = models.SlugField(max_length=150, unique=True)
    
    def __unicode__(self):
        return "{0} of {1} Community".format(self.title, self.community.name)

    def get_absolute_url(self):
        return reverse('edit_page', args=[self.community.slug, self.slug])


class Resource(models.Model):
    """Model to represent a Resources section on Community resource area"""
    title = models.CharField(max_length=255)
    community = models.ForeignKey(Community)
    author = models.ForeignKey(SysterUser)
    date_created = models.DateField(auto_now=False, auto_now_add=True)
    date_modified = models.DateField(auto_now=True, auto_now_add=False)
    is_public = models.BooleanField(default=True)
    tags = models.ManyToManyField(Tag, blank=True, null=True)
    resource_type = models.ForeignKey(ResourceType, blank=True, null=True)
    content = models.TextField()
    slug = models.SlugField(max_length=150, unique=True)

    def __unicode__(self):
        return "{0} of {1} Community".format(self.title, self.community.name)


def user_post_save(sender, instance, created, **kwargs):
    """Create a SysterUser profile when a new user account is created"""
    if created:
        systeruser = SysterUser()
        systeruser.user = instance
        systeruser.save()

post_save.connect(user_post_save, sender=User)
